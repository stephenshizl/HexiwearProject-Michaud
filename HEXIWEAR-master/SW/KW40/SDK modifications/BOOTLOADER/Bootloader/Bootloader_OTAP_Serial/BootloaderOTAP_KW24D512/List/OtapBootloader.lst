###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        11/Jan/2016  15:10:25
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\OtapSerialBootloader\OtapBootloader.c
#    Command line =  
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\OtapSerialBootloader\OtapBootloader.c
#        -D MCU_MK21DN512 -D gEepromType_d=gEepromDevice_AT45DB161E_c
#        --preprocess=cl
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW24D512\List\
#        -lC
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW24D512\List\
#        -lA
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW24D512\List\
#        --diag_suppress Pa039 -o
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW24D512\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\OtapSerialBootloader\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\eeprom\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\spi\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\flash\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\include\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\include\cfg\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\
#        -On --c89
#    List file    =  
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW24D512\List\OtapBootloader.lst
#    Object file  =  
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW24D512\Obj\OtapBootloader.o
#
###############################################################################

C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\OtapSerialBootloader\OtapBootloader.c
      1          /*!
      2          * Copyright (c) 2015, Freescale Semiconductor, Inc.
      3          * All rights reserved.
      4          *
      5          * \file OtapBootloader.c
      6          *
      7          * Redistribution and use in source and binary forms, with or without modification,
      8          * are permitted provided that the following conditions are met:
      9          *
     10          * o Redistributions of source code must retain the above copyright notice, this list
     11          *   of conditions and the following disclaimer.
     12          *
     13          * o Redistributions in binary form must reproduce the above copyright notice, this
     14          *   list of conditions and the following disclaimer in the documentation and/or
     15          *   other materials provided with the distribution.
     16          *
     17          * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     18          *   contributors may be used to endorse or promote products derived from this
     19          *   software without specific prior written permission.
     20          *
     21          * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     22          * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     23          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24          * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     25          * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     26          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     27          * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     28          * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     29          * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     30          * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31          */
     32          
     33          
     34          /*! *********************************************************************************
     35          *************************************************************************************
     36          * Include
     37          *************************************************************************************
     38          ********************************************************************************** */
     39          #include "OtapBootloader.h"
     40          #include "flash_boot_kinetis.h"
     41          #include "Eeprom_Boot.h"
     42          #include "UartBootloader.h"
     43          
     44          
     45          /*! *********************************************************************************
     46          *************************************************************************************
     47          * Private Memory Declarations
     48          *************************************************************************************
     49          ********************************************************************************** */
     50          #if defined(__IAR_SYSTEMS_ICC__)
     51          #pragma section = "IntVectTable"
     52          #pragma location = "IntVectTable"
     53          __root const vector_entry __vector_table[16] =
     54          {
     55              (pointer*)__BOOT_STACK_ADDRESS,  /* Initial SP           */
     56          
     57          #elif defined(__GNUC__)
     58          const vector_entry __vector_table[16] __attribute__ ((section(".vectortable"))) =
     59          {
     60              (pointer*)__SP_INIT,  /* Initial SP           */
     61          #endif
     62          
     63              __thumb_startup, /* Initial PC           */
     64              defaultISR,      /* Non-maskable Interrupt (NMI) */
     65              defaultISR,      /* Hard Fault */
     66              defaultISR,      /* MemManage Fault */
     67              defaultISR,      /* Bus Fault */
     68              defaultISR,      /* Usage Fault */
     69              defaultISR,      /* Usage Fault */
     70              defaultISR,      /* Usage Fault */
     71              defaultISR,      /* Usage Fault */
     72              defaultISR,      /* Usage Fault */
     73              defaultISR,      /* Usage Fault */
     74              defaultISR,      /* Usage Fault */
     75              defaultISR,      /* Usage Fault */
     76              defaultISR,      /* Usage Fault */
     77              defaultISR       /* Usage Fault */
     78          };
     79          
     80          #if defined(__IAR_SYSTEMS_ICC__)
     81          #pragma location = "FlashConfig"
     82          __root const FlashConfig_t gFlashConfig @ "FlashConfig" =
     83          #elif defined(__GNUC__)
     84          const FlashConfig_t gFlashConfig __attribute__ ((section(".cfmconfig"))) =
     85          #endif
     86          {
     87              {0xFFFFFFFF, 0xFFFFFFFF, gFlashProtection_c, 0xFFFFFFFE}
     88          };
     89          
     90          /* Variables used by the Bootloader */
     91          volatile bootInfo_t *gpBootInfo;
     92          volatile uint32_t gBootStorageStartAddress;
     93          
     94          
     95          /*! *********************************************************************************
     96          *************************************************************************************
     97          * Public Functions
     98          *************************************************************************************
     99          ********************************************************************************** */
    100          
    101          /*! *********************************************************************************
    102          * \brief   This function determines the start address of the internal sorage.
    103          *          If value is 0xFFFFFFFF then external storage should be used!
    104          *
    105          * \return the start address of the internal storage
    106          *
    107          ********************************************************************************** */
    108          uint32_t Boot_GetInternalStorageStartAddr(void)
    109          {
    110              return *((uint32_t*)(gBootProductInfoAddress_c + gInternalStorageStartAddressOffset_c));
    111          }
    112          
    113          
    114          /*! *********************************************************************************
    115          * \brief   The function resets the MCU
    116          *
    117          ********************************************************************************** */
    118          void Boot_ResetMCU(void)
    119          {
    120              SCB_AIRCR = SCB_AIRCR_VECTKEY(0x5FA) | SCB_AIRCR_SYSRESETREQ_MASK;
    121              while(1);
    122          }
    123          
    124          
    125          /*! *********************************************************************************
    126          * \brief   Start the user application
    127          *
    128          * \param[in] userStartup  Address of the application's interrupt vector
    129          *
    130          ********************************************************************************** */
    131          static void JumpToApplication(volatile uint32_t userStartup)
    132          {
    133              /* Enable ALL interrupts */
    134              asm("     cpsie   i       ");
    135          
    136              /* set up stack pointer */
    137              asm("LDR      r1,  [r0]");
    138              asm("MSR      MSP, r1");
    139          
    140              /* jump to application reset vector */
    141              asm("ADDS     r0,r0,#0x04 ");
    142              asm("LDR      r0, [r0]");
    143              asm("BX       r0");
    144          }
    145          
    146          
    147          /*! *********************************************************************************
    148          * \brief   Initialize the external storage
    149          *
    150          * \return status
    151          *
    152          ********************************************************************************** */
    153          uint8_t Boot_InitExternalStorage(void)
    154          {
    155              if (gBootInvalidAddress_c == gBootStorageStartAddress)
    156                  return EEPROM_Init();
    157          
    158              return 0;
    159          }
    160          
    161          
    162          /*! *********************************************************************************
    163          * \brief   Read data from the external stoage
    164          *
    165          * \param[in]  NoOfBytes  number of byter to read
    166          * \param[in]  Addr       read memory address
    167          * \param[out] outbuf     location where read data is stored
    168          *
    169          * \return error code. 0 if success
    170          *
    171          ********************************************************************************** */
    172          uint8_t Boot_ReadExternalStorage(uint16_t NoOfBytes, uint32_t Addr, uint8_t *outbuf)
    173          {
    174              if (gBootInvalidAddress_c == gBootStorageStartAddress)
    175              {
    176                  return EEPROM_ReadData(NoOfBytes, Addr, outbuf);
    177              }
    178              else
    179              {
    180                  Addr += gBootStorageStartAddress;
    181                  while(NoOfBytes--)
    182                  {
    183                      *outbuf++ = *((uint8_t*)Addr++);
    184                  }
    185          
    186                  return 0;
    187              }
    188          }
    189          
    190          
    191          /*! *********************************************************************************
    192          * \brief   This function will copy the User Application from the external memory
    193          *          into the program Flash
    194          *
    195          ********************************************************************************** */
    196          void Boot_LoadImage (void)
    197          {
    198              static uint8_t bitmapBuffer[gBootData_SectorsBitmap_Size_c];
    199              bootInfo_t flags;
    200              uint8_t  buffer[gFlashErasePage_c];
    201              uint32_t remaingImgSize, len;
    202              uint32_t flashAddr      = 0;
    203              uint8_t  bitMask        = gBitMaskInit_c;
    204              uint8_t *pBitmap        = bitmapBuffer;
    205          #if defined(MCU_MK21DX256)
    206              vuint8_t* pFlexRamAddress;
    207              uint8_t  EEEDataSetSize;
    208              uint16_t size;
    209          #endif
    210          
    211              /* Check if we have a valid internal storage start address. */
    212              gBootStorageStartAddress = Boot_GetInternalStorageStartAddr();
    213          
    214              /* Init the flash module */
    215              FlashInitialization();
    216          
    217              /* Init the external storage */
    218              Boot_InitExternalStorage();
    219          
    220              /* Read image size */
    221              if (Boot_ReadExternalStorage(gBootData_ImageLength_Size_c,gBootData_ImageLength_Offset_c, (uint8_t*)(&remaingImgSize)))
    222                  gHandleBootError_d();
    223          
    224              /* Read sector bitmap */
    225              if (Boot_ReadExternalStorage(gBootData_SectorsBitmap_Size_c, gBootData_SectorsBitmap_Offset_c, bitmapBuffer))
    226                  gHandleBootError_d();
    227          
    228              /* Start writing the image. Do not alter the last sector which contains HW specific data! */
    229              while (flashAddr < (gMcuFlashSize_c - gFlashErasePage_c))
    230              {
    231                  if (remaingImgSize > gFlashErasePage_c)
    232                      len = gFlashErasePage_c;
    233                  else
    234                      len = remaingImgSize;
    235          
    236                  /* Check if bitmap indicates that this sector is write protected and shouldn't be updated */
    237                  if ((*pBitmap & bitMask) && (flashAddr >= gUserFlashStart_d))
    238                  {
    239                      /* Erase Flash sector */
    240                      if (FLASH_OK != FLASH_EraseSector(flashAddr))
    241                          gHandleBootError_d();
    242          
    243                      if (len)
    244                      {
    245                          /* Read a new image block */
    246                          if (Boot_ReadExternalStorage(len, flashAddr + gBootData_Image_Offset_c, buffer))
    247                              gHandleBootError_d();
    248          
    249          
    250                          if( (flashAddr <= gBootImageFlagsAddress_c) && (flashAddr + len > gBootImageFlagsAddress_c) )
    251                          {
    252                              uint32_t i, offset = gBootImageFlagsAddress_c - flashAddr;
    253                              /* Program the Flash before boot flags */
    254                              if(FLASH_OK != FLASH_Program(flashAddr, (uint32_t)buffer, offset))
    255                                  gHandleBootError_d();
    256          
    257                              /* Keep the boot flags set  until the all image is downloaded */
    258                              for( i=0; i<gEepromParams_WriteAlignment_c; i++ )
    259                              {
    260                                  flags.newBootImageAvailable[i] = gBootValueForFALSE_c;
    261                                  flags.bootProcessCompleted[i] = gBootValueForTRUE_c;
    262                              }
    263                              i = offset + 2 * gEepromParams_WriteAlignment_c;
    264                              flags.bootVersion[0] = buffer[i++];
    265                              flags.bootVersion[1] = buffer[i];
    266                              offset += gEepromAlignAddr_d(sizeof(bootInfo_t));
    267          
    268                              /* Program the Flash after the boot flags*/
    269                              if(FLASH_OK != FLASH_Program(flashAddr + offset, (uint32_t)(&buffer[offset]), len - offset))
    270                                  gHandleBootError_d();
    271                          }
    272                          else
    273                          {
    274                              /* Program the image block to Flash */
    275                              if(FLASH_OK != FLASH_Program(flashAddr, (uint32_t)buffer, len))
    276                                  gHandleBootError_d();
    277                          }
    278                      }
    279                  }
    280          
    281                  /* Update Bitmask */
    282                  bitMask <<= 1;
    283                  if (bitMask == 0)
    284                  {
    285                      /* This was last bit in the current bitmap byte. Move to next bitmap byte */
    286                      bitMask = gBitMaskInit_c;
    287                      pBitmap++;
    288                  }
    289          
    290                  /* Update the current flash address */
    291                  flashAddr += gFlashErasePage_c;
    292          
    293                  /* Update the remaining bytes*/
    294                  if (remaingImgSize)
    295                      remaingImgSize -= len;
    296              } /* while */
    297          
    298          #if defined(MCU_MK21DX256)
    299          
    300              while((FTFL_FSTAT & FTFL_FSTAT_CCIF_MASK) != FTFL_FSTAT_CCIF_MASK)
    301              {
    302                  /* wait till CCIF bit is set */
    303              }
    304          
    305              /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register */
    306              FTFL_FSTAT = (FTFL_FSTAT_RDCOLERR_MASK | FTFL_FSTAT_ACCERR_MASK |
    307                            FTFL_FSTAT_FPVIOL_MASK);
    308          
    309              /* Write Command Code to FCCOB0 */
    310              FTFL_FCCOB0 = FLASH_READ_RESOURCE;
    311              /* Write address to FCCOB1/2/3 */
    312              FTFL_FCCOB1 = ((uint8_t)(FLASH_DFLASH_IFR_READRESOURCE_ADDRESS >> 16));
    313              FTFL_FCCOB2 = ((uint8_t)((FLASH_DFLASH_IFR_READRESOURCE_ADDRESS >> 8) & 0xFF));
    314              FTFL_FCCOB3 = ((uint8_t)(FLASH_DFLASH_IFR_READRESOURCE_ADDRESS & 0xFF));
    315          
    316              /* Write Resource Select Code of 0 to FCCOB8 to select IFR. Without this, */
    317              /* an access error may occur if the register contains data from a previous command. */
    318              FTFL_FCCOB8 = 0;
    319          
    320              /* clear CCIF bit */
    321              FTFL_FSTAT |= FTFL_FSTAT_CCIF_MASK;
    322          
    323              /* check CCIF bit */
    324              while((FTFL_FSTAT & FTFL_FSTAT_CCIF_MASK) != FTFL_FSTAT_CCIF_MASK)
    325              {
    326                  /* wait till CCIF bit is set */
    327              }
    328          
    329              /* read the FlexRAM window size */
    330              EEEDataSetSize = FTFL_FCCOB6;
    331              EEEDataSetSize &= 0x0F;
    332          
    333              if((EEEDataSetSize == 2) || (EEEDataSetSize == 3)) /* FlexRAM size is 4KB or 2KB */
    334              {
    335                  /* Enable EEE */
    336                  FLASH_SetEEEEnable(FLASH_FLEXRAM_FNC_CTRL_CODE);
    337          
    338                  pBitmap = &bitmapBuffer[0] + (uint32_t)((gMcuFlashSize_c/gFlashErasePage_c)/8);
    339          
    340                  if(EEEDataSetSize == 2) /* 4KB */
    341                  {
    342                      if(*pBitmap & 0x01)
    343                      {
    344                          size = gBootFlexRam_4K_Size_c/2;
    345                          pFlexRamAddress = (vuint8_t*)((uint32_t)gBootFlexRAMBaseAddress_c);
    346                          while(size--)
    347                          {
    348                              /* wait for EEPROM system to be ready */
    349                              while(!(FTFL_FCNFG & FTFL_FCNFG_EEERDY_MASK));
    350                              *pFlexRamAddress = 0xFF;
    351                              pFlexRamAddress ++;
    352                          }
    353                      }
    354                      if(*pBitmap & 0x02)
    355                      {
    356                          size = gBootFlexRam_4K_Size_c/2;
    357                          pFlexRamAddress = (vuint8_t*)((uint32_t)(gBootFlexRAMBaseAddress_c + size));
    358                          while(size--)
    359                          {
    360                              /* wait for EEPROM system to be ready */
    361                              while(!(FTFL_FCNFG & FTFL_FCNFG_EEERDY_MASK));
    362                              *pFlexRamAddress = 0xFF;
    363                              pFlexRamAddress ++;
    364                          }
    365                      }
    366                  }
    367                  else if (EEEDataSetSize == 3) /* 2K */
    368                  {
    369                      if(*pBitmap & 0x01)
    370                      {
    371                          size = gBootFlexRam_2K_Size_c/2;
    372                          pFlexRamAddress = (vuint8_t*)((uint32_t)gBootFlexRAMBaseAddress_c);
    373                          while(size--)
    374                          {
    375                              /* wait for EEPROM system to be ready */
    376                              while(!(FTFL_FCNFG & FTFL_FCNFG_EEERDY_MASK));
    377                              *pFlexRamAddress = 0xFF;
    378                              pFlexRamAddress ++;
    379                          }
    380                      }
    381                      if(*pBitmap & 0x02)
    382                      {
    383                          size = gBootFlexRam_2K_Size_c/2;
    384                          pFlexRamAddress = (vuint8_t*)((uint32_t)(gBootFlexRAMBaseAddress_c + size));
    385                          while(size--)
    386                          {
    387                              /* wait for EEPROM system to be ready */
    388                              while(!(FTFL_FCNFG & FTFL_FCNFG_EEERDY_MASK));
    389                              *pFlexRamAddress = 0xFF;
    390                              pFlexRamAddress ++;
    391                          }
    392                      }
    393                  }
    394              }
    395          #endif
    396          
    397          
    398              /* Set the bBootProcessCompleted Flag */
    399              if( FLASH_OK != FLASH_Program((uint32_t)gBootImageFlagsAddress_c, (uint32_t)&flags, sizeof(flags)) )
    400                  gHandleBootError_d();
    401          
    402              /* Reseting MCU */
    403              Boot_ResetMCU();
    404          }
    405          
    406          /*! *********************************************************************************
    407          * \brief   This is the Bootloader's entry point
    408          *
    409          ********************************************************************************** */
    410          void __thumb_startup(void)
    411          {
    412              (void)main(0, 0);
    413          }
    414          
    415          /*! *********************************************************************************
    416          * \brief   This is the main Bootloader function.
    417          *          It decides if it will load a new image or jump to the application
    418          *
    419          * \param[in] argc
    420          * \param[in] argv
    421          *
    422          * \return int
    423          *
    424          ********************************************************************************** */
    425          int main(int argc, char **argv)
    426          {
    427              /* Disable interrupt by default */
    428              asm("     CPSID   i       ");
    429          
    430              /* Set the start address of the interrupt vector*/
    431              SCB_VTOR = (uint32_t)__region_BOOT_ROM_start__;
    432          
    433              /* Disable watchdog */
    434          #if defined(MCU_MK21DN512) || defined(MCU_MK21DX256) || defined(MCU_MK64FN1M)
    435              WDOG_UNLOCK = 0xC520;
    436              WDOG_UNLOCK = 0xD928;
    437              WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN_MASK;
    438          #elif defined(MCU_MKL46Z256) || defined(MCU_MKW40Z160)
    439              SIM_COPC = SIM_COPC_COPT(0);
    440          #endif
    441          #if gSerialBootloaderEnable_c
    442              BOOT_PIN_ENABLE_SIM_SCG_REG |= BOOT_PIN_ENABLE_SIM_SCG_MASK;
    443              PORT_PCR_REG(BOOT_PIN_ENABLE_PORT_BASE,BOOT_PIN_ENABLE_NUM) = PORT_PCR_MUX(1) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK;
    444              {
    445                  vuint32_t delay;
    446                  delay = 5;
    447                  while(--delay);
    448              }
    449              if((GPIO_PDIR_REG(BOOT_PIN_ENABLE_GPIO_BASE) & (1 << BOOT_PIN_ENABLE_NUM)) == 0)
    450              {
    451                  CheckForUartLoader();
    452              }
    453          #endif
    454              /* Check if there is no boot image available in the external EEPROM and if eventually
    455              the booting of the previous one has been completed. If both conditions are met, start
    456              running the application in the internal Flash. Else, start the process of booting from
    457              external EEPROM */
    458              gpBootInfo = (bootInfo_t*)gBootImageFlagsAddress_c;
    459              /*
    460              if( (gpBootInfo->newBootImageAvailable == gBootValueForTRUE_c) &&
    461              (gpBootInfo->bootProcessCompleted ==  gBootValueForFALSE_c) )
    462              */
    463              if ((gpBootInfo->newBootImageAvailable[0] != gBootValueForTRUE_c) &&
    464                  (gpBootInfo->bootProcessCompleted[0] ==  gBootValueForTRUE_c))
    465              {
    466                  /* Set the start address of the interrupt vector*/
    467                  SCB_VTOR = gUserFlashStart_d;
    468                  JumpToApplication(gUserFlashStart_d);
    469              }
    470              else
    471              {
    472                  /* Write the new image */
    473                  Boot_LoadImage();
    474              }
    475          
    476              return 0;
    477          }
    478          
    479          /*! *********************************************************************************
    480          * \brief   Default ISR handler
    481          *
    482          ********************************************************************************** */
    483          void defaultISR(void)
    484          {
    485              /* ISR code */
    486              gHandleBootError_d();
    487          }
    488          //-----------------------------------------------------------------------------

Errors: 1
Warnings: none
