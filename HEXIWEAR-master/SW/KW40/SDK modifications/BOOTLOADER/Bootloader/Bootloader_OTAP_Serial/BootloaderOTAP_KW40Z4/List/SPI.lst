###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        12/Jan/2016  08:59:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\spi\SPI.c
#    Command line =  
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\spi\SPI.c
#        -D MCU_MKW40Z160 -D gEepromType_d=gEepromDevice_M25P80_c
#        --preprocess=cl
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW40Z4\List\
#        -lC
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW40Z4\List\
#        -lA
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW40Z4\List\
#        --diag_suppress Pa039 -o
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW40Z4\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\OtapSerialBootloader\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\spi\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\eeprom\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\flash\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\include\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\
#        -I
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\include\cfg\
#        -On --c89
#    List file    =  
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW40Z4\List\SPI.lst
#    Object file  =  
#        C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\BootloaderOTAP_KW40Z4\Obj\SPI.o
#
###############################################################################

C:\Freescale\KW40Z_Connectivity_Software_1.0.1\ConnSw\framework\Bootloader\Bootloader_OTAP_Serial\src\spi\SPI.c
      1          /*!
      2          * Copyright (c) 2015, Freescale Semiconductor, Inc.
      3          * All rights reserved.
      4          *
      5          * \file SPI.c
      6          *
      7          * Redistribution and use in source and binary forms, with or without modification,
      8          * are permitted provided that the following conditions are met:
      9          *
     10          * o Redistributions of source code must retain the above copyright notice, this list
     11          *   of conditions and the following disclaimer.
     12          *
     13          * o Redistributions in binary form must reproduce the above copyright notice, this
     14          *   list of conditions and the following disclaimer in the documentation and/or
     15          *   other materials provided with the distribution.
     16          *
     17          * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     18          *   contributors may be used to endorse or promote products derived from this
     19          *   software without specific prior written permission.
     20          *
     21          * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     22          * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     23          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     24          * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     25          * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     26          * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     27          * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     28          * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     29          * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     30          * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31          */
     32          
     33          
     34          /*! *********************************************************************************
     35          *************************************************************************************
     36          * Include
     37          *************************************************************************************
     38          ********************************************************************************** */
     39          
     40          #include "EmbeddedTypes.h"
     41          #include "SPI.h"
     42          
     43          
     44          /*! *********************************************************************************
     45          *************************************************************************************
     46          * Public Functions
     47          *************************************************************************************
     48          ********************************************************************************** */
     49          
     50          /*! *********************************************************************************
     51          * \brief   This function initialized the SPI module
     52          *
     53          * \param[in]  interfaceId        SPI module number
     54          *
     55          ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
     56          void spi_master_init(uint32_t instance)
     57          {
     58              (void)instance;
     59              /* Enable SPI PORT clock */
     60              BOOT_SPI_PORT_SIM_SCG |= cSPI_PORT_SIM_SCG_Config_c;
   \                     spi_master_init: (+1)
   \   00000000   0x....             LDR      R1,??DataTable2  ;; 0x40048038
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x2280             MOVS     R2,#+128
   \   00000006   0x0092             LSLS     R2,R2,#+2        ;; #+512
   \   00000008   0x430A             ORRS     R2,R2,R1
   \   0000000A   0x....             LDR      R1,??DataTable2  ;; 0x40048038
   \   0000000C   0x600A             STR      R2,[R1, #+0]
     61              /* Enable SPI clock */
     62              BOOT_SPI_SIM_SCG |= cSPI_SIM_SCG_Config_c;
   \   0000000E   0x....             LDR      R1,??DataTable2_1  ;; 0x4004803c
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x2280             MOVS     R2,#+128
   \   00000014   0x0192             LSLS     R2,R2,#+6        ;; #+8192
   \   00000016   0x430A             ORRS     R2,R2,R1
   \   00000018   0x....             LDR      R1,??DataTable2_1  ;; 0x4004803c
   \   0000001A   0x600A             STR      R2,[R1, #+0]
     63              /* Initialize SPI Pin Control registers */
     64              BOOT_SPI_SCLK_PCR &= ~PORT_PCR_MUX_MASK;
   \   0000001C   0x....             LDR      R1,??DataTable2_2  ;; 0x40049048
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x....             LDR      R2,??DataTable2_3  ;; 0xfffff8ff
   \   00000022   0x400A             ANDS     R2,R2,R1
   \   00000024   0x....             LDR      R1,??DataTable2_2  ;; 0x40049048
   \   00000026   0x600A             STR      R2,[R1, #+0]
     65              BOOT_SPI_SCLK_PCR |= PORT_PCR_MUX(2);
   \   00000028   0x....             LDR      R1,??DataTable2_2  ;; 0x40049048
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0x2280             MOVS     R2,#+128
   \   0000002E   0x0092             LSLS     R2,R2,#+2        ;; #+512
   \   00000030   0x430A             ORRS     R2,R2,R1
   \   00000032   0x....             LDR      R1,??DataTable2_2  ;; 0x40049048
   \   00000034   0x600A             STR      R2,[R1, #+0]
     66              BOOT_SPI_MOSI_PCR &= ~PORT_PCR_MUX_MASK;
   \   00000036   0x....             LDR      R1,??DataTable2_4  ;; 0x40049040
   \   00000038   0x6809             LDR      R1,[R1, #+0]
   \   0000003A   0x....             LDR      R2,??DataTable2_3  ;; 0xfffff8ff
   \   0000003C   0x400A             ANDS     R2,R2,R1
   \   0000003E   0x....             LDR      R1,??DataTable2_4  ;; 0x40049040
   \   00000040   0x600A             STR      R2,[R1, #+0]
     67              BOOT_SPI_MOSI_PCR |= PORT_PCR_MUX(2);
   \   00000042   0x....             LDR      R1,??DataTable2_4  ;; 0x40049040
   \   00000044   0x6809             LDR      R1,[R1, #+0]
   \   00000046   0x2280             MOVS     R2,#+128
   \   00000048   0x0092             LSLS     R2,R2,#+2        ;; #+512
   \   0000004A   0x430A             ORRS     R2,R2,R1
   \   0000004C   0x....             LDR      R1,??DataTable2_4  ;; 0x40049040
   \   0000004E   0x600A             STR      R2,[R1, #+0]
     68              BOOT_SPI_MISO_PCR &= ~PORT_PCR_MUX_MASK;
   \   00000050   0x....             LDR      R1,??DataTable2_5  ;; 0x40049044
   \   00000052   0x6809             LDR      R1,[R1, #+0]
   \   00000054   0x....             LDR      R2,??DataTable2_3  ;; 0xfffff8ff
   \   00000056   0x400A             ANDS     R2,R2,R1
   \   00000058   0x....             LDR      R1,??DataTable2_5  ;; 0x40049044
   \   0000005A   0x600A             STR      R2,[R1, #+0]
     69              BOOT_SPI_MISO_PCR |= PORT_PCR_MUX(2);
   \   0000005C   0x....             LDR      R1,??DataTable2_5  ;; 0x40049044
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0x2280             MOVS     R2,#+128
   \   00000062   0x0092             LSLS     R2,R2,#+2        ;; #+512
   \   00000064   0x430A             ORRS     R2,R2,R1
   \   00000066   0x....             LDR      R1,??DataTable2_5  ;; 0x40049044
   \   00000068   0x600A             STR      R2,[R1, #+0]
     70              //  BOOT_SPI_SSEL_PCR &= ~PORT_PCR_MUX_MASK;
     71              //  BOOT_SPI_SSEL_PCR |= PORT_PCR_MUX(2);
     72              /* CS is used as a GPIO */
     73              BOOT_SPI_SSEL_PCR &= ~PORT_PCR_MUX_MASK;
   \   0000006A   0x....             LDR      R1,??DataTable2_6  ;; 0x4004904c
   \   0000006C   0x6809             LDR      R1,[R1, #+0]
   \   0000006E   0x....             LDR      R2,??DataTable2_3  ;; 0xfffff8ff
   \   00000070   0x400A             ANDS     R2,R2,R1
   \   00000072   0x....             LDR      R1,??DataTable2_6  ;; 0x4004904c
   \   00000074   0x600A             STR      R2,[R1, #+0]
     74              BOOT_SPI_SSEL_PCR |= PORT_PCR_MUX(1);
   \   00000076   0x....             LDR      R1,??DataTable2_6  ;; 0x4004904c
   \   00000078   0x6809             LDR      R1,[R1, #+0]
   \   0000007A   0x2280             MOVS     R2,#+128
   \   0000007C   0x0052             LSLS     R2,R2,#+1        ;; #+256
   \   0000007E   0x430A             ORRS     R2,R2,R1
   \   00000080   0x....             LDR      R1,??DataTable2_6  ;; 0x4004904c
   \   00000082   0x600A             STR      R2,[R1, #+0]
     75              BOOT_SPI_SSEL_PDDR |= 1 << BOOT_SPI_SSEL_PIN_Number_c;
   \   00000084   0x....             LDR      R1,??DataTable2_7  ;; 0x400ff014
   \   00000086   0x6809             LDR      R1,[R1, #+0]
   \   00000088   0x2280             MOVS     R2,#+128
   \   0000008A   0x0312             LSLS     R2,R2,#+12       ;; #+524288
   \   0000008C   0x430A             ORRS     R2,R2,R1
   \   0000008E   0x....             LDR      R1,??DataTable2_7  ;; 0x400ff014
   \   00000090   0x600A             STR      R2,[R1, #+0]
     76              deassert_cs();
   \   00000092   0x....             LDR      R1,??DataTable2_8  ;; 0x400ff004
   \   00000094   0x6809             LDR      R1,[R1, #+0]
   \   00000096   0x2280             MOVS     R2,#+128
   \   00000098   0x0312             LSLS     R2,R2,#+12       ;; #+524288
   \   0000009A   0x430A             ORRS     R2,R2,R1
   \   0000009C   0x....             LDR      R1,??DataTable2_8  ;; 0x400ff004
   \   0000009E   0x600A             STR      R2,[R1, #+0]
     77          
     78              /* Initialize SPI module */
     79          #if gSPI_HW_TYPE_c == gDSPI_HW_c
     80              SPI_MCR_REG(BOOT_SPI_BaseAddr) = SPI_MCR_MSTR_MASK    |
     81                                               SPI_MCR_ROOE_MASK    |
     82                                               SPI_MCR_CLR_RXF_MASK |
     83                                               SPI_MCR_CLR_TXF_MASK |
     84                                               SPI_MCR_PCSIS(1)     |
     85                                               SPI_MCR_SMPL_PT(2)   |
     86                                               SPI_MCR_HALT_MASK;
   \   000000A0   0x....             LDR      R1,??DataTable2_9  ;; 0x81010e01
   \   000000A2   0x....             LDR      R2,??DataTable2_10  ;; 0x4002d000
   \   000000A4   0x6011             STR      R1,[R2, #+0]
     87          #else
     88              SPI_C1_REG(BOOT_SPI_BaseAddr) = SPI_C1_MSTR_MASK;
     89              SPI_C2_REG(BOOT_SPI_BaseAddr) = 0x00;
     90              SPI_C1_REG(BOOT_SPI_BaseAddr) |= SPI_C1_SPE_MASK;
     91          #endif
     92          }
   \   000000A6   0x4770             BX       LR               ;; return
     93          
     94          /*! *********************************************************************************
     95          * \brief   This function configures the SPI interface
     96          *
     97          * \param[in]  interfaceId        SPI module number
     98          * \param[in]  device             device config strucure
     99          *
    100          ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    101          void spi_master_configure_bus(uint32_t instance, const spi_user_config_t * device)
    102          {
    103          #if gSPI_HW_TYPE_c == gDSPI_HW_c
    104              SPI_CTAR_REG(BOOT_SPI_BaseAddr,0) = SPI_CTAR_PBR(0)    | SPI_CTAR_BR(0x01)    |
    105                                                  SPI_CTAR_PCSSCK(1) | SPI_CTAR_CSSCK(0x04) |
    106                                                  SPI_CTAR_PASC(3)   | SPI_CTAR_ASC(0x04)   |
    107                                                  SPI_CTAR_PDT(3)    | SPI_CTAR_DT(0x05)    |
    108                                                  SPI_CTAR_FMSZ(7);
   \                     spi_master_configure_bus: (+1)
   \   00000000   0x....             LDR      R2,??DataTable2_11  ;; 0x387c4451
   \   00000002   0x....             LDR      R3,??DataTable2_12  ;; 0x4002d00c
   \   00000004   0x601A             STR      R2,[R3, #+0]
    109          #else
    110              SPI_BR_REG(BOOT_SPI_BaseAddr) = SPI_BR_SPPR(1) | SPI_BR_SPR(0);
    111          #endif
    112          }
   \   00000006   0x4770             BX       LR               ;; return
    113          
    114          
    115          /*! *********************************************************************************
    116          * \brief   This function transferes bytes over the SPI interface
    117          *
    118          * \param[in]  interfaceId        SPI module number
    119          * \param[in]  device             device config strucure
    120          * \param[in]  sendBuffer         location of data to be Tx. NULL if no Tx needed
    121          * \param[out] receiveBuffer      location where Rx data is stored. NULL if no Rx needed
    122          * \param[in]  transferByteCount  number of bytes to be transfered
    123          *
    124          * \return spi_status_t
    125          *
    126          ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    127          spi_status_t spi_master_transfer(uint32_t instance,
    128                                           const uint8_t * sendBuffer,
    129                                           uint8_t * receiveBuffer,
    130                                           uint32_t transferByteCount)
    131          {
   \                     spi_master_transfer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    132              volatile uint8_t dummy = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x466D             MOV      R5,SP
   \   00000008   0x7028             STRB     R0,[R5, #+0]
    133          
    134              if( !transferByteCount )
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD101             BNE      ??spi_master_transfer_0
    135                  return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE049             B        ??spi_master_transfer_1
    136          
    137              if( !sendBuffer && !receiveBuffer )
   \                     ??spi_master_transfer_0: (+1)
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD103             BNE      ??spi_master_transfer_2
   \   00000016   0x2A00             CMP      R2,#+0
   \   00000018   0xD101             BNE      ??spi_master_transfer_2
    138                  return 1;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xE043             B        ??spi_master_transfer_1
    139          
    140          #if gSPI_HW_TYPE_c == gDSPI_HW_c
    141              /* Flush SPI FIFOs */
    142              SPI_MCR_REG(BOOT_SPI_BaseAddr) |= SPI_MCR_CLR_RXF_MASK | SPI_MCR_CLR_TXF_MASK;
   \                     ??spi_master_transfer_2: (+1)
   \   0000001E   0x....             LDR      R0,??DataTable2_10  ;; 0x4002d000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x25C0             MOVS     R5,#+192
   \   00000024   0x012D             LSLS     R5,R5,#+4        ;; #+3072
   \   00000026   0x4305             ORRS     R5,R5,R0
   \   00000028   0x....             LDR      R0,??DataTable2_10  ;; 0x4002d000
   \   0000002A   0x6005             STR      R5,[R0, #+0]
    143              /* Clear the EOQF, TCF and RFDF flags by writting a 1 to them */
    144              SPI_SR_REG(BOOT_SPI_BaseAddr)  |= SPI_SR_EOQF_MASK | SPI_SR_TCF_MASK | SPI_SR_RFDF_MASK;
   \   0000002C   0x....             LDR      R0,??DataTable2_13  ;; 0x4002d02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x....             LDR      R5,??DataTable2_14  ;; 0x90020000
   \   00000032   0x4305             ORRS     R5,R5,R0
   \   00000034   0x....             LDR      R0,??DataTable2_13  ;; 0x4002d02c
   \   00000036   0x6005             STR      R5,[R0, #+0]
    145          #else
    146              dummy = SPI_S_REG(BOOT_SPI_BaseAddr);
    147          #endif
    148          
    149              while( transferByteCount-- )
   \                     ??spi_master_transfer_3: (+1)
   \   00000038   0x0018             MOVS     R0,R3
   \   0000003A   0x1E43             SUBS     R3,R0,#+1
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD02F             BEQ      ??spi_master_transfer_4
    150              {
    151                  if( sendBuffer )
   \   00000040   0x2900             CMP      R1,#+0
   \   00000042   0xD004             BEQ      ??spi_master_transfer_5
    152                  {
    153                      dummy = *sendBuffer;
   \   00000044   0x7808             LDRB     R0,[R1, #+0]
   \   00000046   0x466D             MOV      R5,SP
   \   00000048   0x7028             STRB     R0,[R5, #+0]
    154                      sendBuffer++;
   \   0000004A   0x1C49             ADDS     R1,R1,#+1
   \   0000004C   0xE002             B        ??spi_master_transfer_6
    155                  }
    156                  else
    157                  {
    158                      dummy = 0xFF;
   \                     ??spi_master_transfer_5: (+1)
   \   0000004E   0x20FF             MOVS     R0,#+255
   \   00000050   0x466D             MOV      R5,SP
   \   00000052   0x7028             STRB     R0,[R5, #+0]
    159                  }
    160          
    161          #if gSPI_HW_TYPE_c == gDSPI_HW_c
    162                  /* Write data */
    163                  SPI_PUSHR_REG(BOOT_SPI_BaseAddr) = dummy;
   \                     ??spi_master_transfer_6: (+1)
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x....             LDR      R5,??DataTable2_15  ;; 0x4002d034
   \   0000005A   0x6028             STR      R0,[R5, #+0]
    164                  /* Start SPI Transfer */
    165                  SPI_MCR_REG(BOOT_SPI_BaseAddr) &= ~SPI_MCR_HALT_MASK;
   \   0000005C   0x....             LDR      R0,??DataTable2_10  ;; 0x4002d000
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x2501             MOVS     R5,#+1
   \   00000062   0x43A8             BICS     R0,R0,R5
   \   00000064   0x....             LDR      R5,??DataTable2_10  ;; 0x4002d000
   \   00000066   0x6028             STR      R0,[R5, #+0]
    166                  /* Wait Transfer complete */
    167                  while( !(SPI_SR_REG(BOOT_SPI_BaseAddr) & SPI_SR_TCF_MASK) );
   \                     ??spi_master_transfer_7: (+1)
   \   00000068   0x....             LDR      R0,??DataTable2_13  ;; 0x4002d02c
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD5FB             BPL      ??spi_master_transfer_7
    168                  /* Clear Transfer complete flag */
    169                  SPI_SR_REG(BOOT_SPI_BaseAddr) |= SPI_SR_TCF_MASK;
   \   00000070   0x....             LDR      R0,??DataTable2_13  ;; 0x4002d02c
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x2580             MOVS     R5,#+128
   \   00000076   0x062D             LSLS     R5,R5,#+24       ;; #-2147483648
   \   00000078   0x4305             ORRS     R5,R5,R0
   \   0000007A   0x....             LDR      R0,??DataTable2_13  ;; 0x4002d02c
   \   0000007C   0x6005             STR      R5,[R0, #+0]
    170                  /* Stop SPI transfer */
    171                  SPI_MCR_REG(BOOT_SPI_BaseAddr) |= SPI_MCR_HALT_MASK;
   \   0000007E   0x....             LDR      R0,??DataTable2_10  ;; 0x4002d000
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x2501             MOVS     R5,#+1
   \   00000084   0x4305             ORRS     R5,R5,R0
   \   00000086   0x....             LDR      R0,??DataTable2_10  ;; 0x4002d000
   \   00000088   0x6005             STR      R5,[R0, #+0]
    172                  /* Get received datad */
    173                  dummy = SPI_POPR_REG(BOOT_SPI_BaseAddr);
   \   0000008A   0x....             LDR      R0,??DataTable2_16  ;; 0x4002d038
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x466D             MOV      R5,SP
   \   00000090   0x7028             STRB     R0,[R5, #+0]
    174          #else
    175                  /* Write data */
    176                  SPI_DL_REG(BOOT_SPI_BaseAddr) = dummy;
    177                  /* Wait for transfer complete */
    178                  //        while(!(SPI1_S & SPI_S_SPTEF_MASK));
    179                  while(!(SPI_S_REG(BOOT_SPI_BaseAddr) & SPI_S_SPRF_MASK));
    180                  /* Get received datad */
    181                  dummy = SPI_DL_REG(BOOT_SPI_BaseAddr);
    182          #endif
    183          
    184                  if( receiveBuffer )
   \   00000092   0x2A00             CMP      R2,#+0
   \   00000094   0xD0D0             BEQ      ??spi_master_transfer_3
    185                  {
    186                      *receiveBuffer = dummy;
   \   00000096   0x4668             MOV      R0,SP
   \   00000098   0x7800             LDRB     R0,[R0, #+0]
   \   0000009A   0x7010             STRB     R0,[R2, #+0]
    187                      receiveBuffer++;
   \   0000009C   0x1C52             ADDS     R2,R2,#+1
   \   0000009E   0xE7CB             B        ??spi_master_transfer_3
    188                  }
    189              }
    190          
    191              (void)dummy;
   \                     ??spi_master_transfer_4: (+1)
   \   000000A0   0x4668             MOV      R0,SP
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
    192              return 0;
   \   000000A4   0x2000             MOVS     R0,#+0
   \                     ??spi_master_transfer_1: (+1)
   \   000000A6   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    193          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40049048         DC32     0x40049048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xFFFFF8FF         DC32     0xfffff8ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x4004904C         DC32     0x4004904c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x400FF014         DC32     0x400ff014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x400FF004         DC32     0x400ff004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x81010E01         DC32     0x81010e01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x387C4451         DC32     0x387c4451

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x4002D00C         DC32     0x4002d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x4002D02C         DC32     0x4002d02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x90020000         DC32     0x90020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x4002D034         DC32     0x4002d034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x4002D038         DC32     0x4002d038

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   spi_master_configure_bus
       0   spi_master_init
      16   spi_master_transfer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       8  spi_master_configure_bus
     168  spi_master_init
     168  spi_master_transfer

 
 412 bytes in section .text
 
 412 bytes of CODE memory

Errors: none
Warnings: none
