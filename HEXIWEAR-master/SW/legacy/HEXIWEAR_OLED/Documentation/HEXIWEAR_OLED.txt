=============================================================================
List of generated methods in project: HEXIWEAR_OLED

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "clkManager" (component fsl_clock_manager)
   - clkManager_CLOCK_SYS_SetOutDiv1 -Sets the clock out divider1 setting(OUTDIV1).
   - clkManager_CLOCK_SYS_GetOutDiv1 -Gets the clock out divider1 setting(OUTDIV1).
   - clkManager_CLOCK_SYS_SetOutDiv2 -Sets the clock out divider2 setting(OUTDIV2).
   - clkManager_CLOCK_SYS_GetOutDiv2 -Gets the clock out divider2 setting(OUTDIV2).
   - clkManager_CLOCK_SYS_SetOutDiv3 -Sets the clock out divider3 setting(OUTDIV3).
   - clkManager_CLOCK_SYS_GetOutDiv3 -Gets the clock out divider3 setting(OUTDIV3).
   - clkManager_CLOCK_SYS_SetOutDiv4 -Sets the clock out divider4 setting(OUTDIV4).
   - clkManager_CLOCK_SYS_GetOutDiv4 -Gets the clock out divider4 setting(OUTDIV4).
   - clkManager_CLOCK_SYS_SetOutDiv -Sets the clock out dividers setting.
   - clkManager_CLOCK_SYS_GetOutDiv -Gets the clock out dividers setting.
   - clkManager_CLOCK_SYS_GetFlexbusFreq -Get flexbus clock frequency.
   - clkManager_CLOCK_SYS_GetPllFllClockFreq -Get the MCGPLLCLK/MCGFLLCLK/IRC48MCLK clock frequency.
   - clkManager_CLOCK_SYS_SetPllfllSel -Set PLL/FLL clock selection.
   - clkManager_CLOCK_SYS_GetPllfllSel -Get PLL/FLL clock selection.
   - clkManager_CLOCK_SYS_GetFixedFreqClockFreq -Gets the MCGFFCLK clock frequency.
   - clkManager_CLOCK_SYS_GetInternalRefClockFreq -Get internal reference clock frequency.
   - clkManager_CLOCK_SYS_GetExternalRefClock32kFreq -Gets the external reference 32k clock frequency.
   - clkManager_CLOCK_SYS_SetExternalRefClock32kSrc -Set the clock selection of ERCLK32K.
   - clkManager_CLOCK_SYS_GetExternalRefClock32kSrc -Get the clock selection of ERCLK32K.
   - clkManager_CLOCK_SYS_GetOsc0ExternalRefClockFreq -Gets the OSC0ERCLK frequency.
   - clkManager_CLOCK_SYS_GetRtcFreq -Gets RTC input clock frequency.
   - clkManager_CLOCK_SYS_GetRtcOutFreq -Gets RTC_CLKOUT frequency.
   - clkManager_CLOCK_SYS_GetRtcOutSrc -Gets RTC_CLKOUT source.
   - clkManager_CLOCK_SYS_SetRtcOutSrc -Gets RTC_CLKOUT source.
   - clkManager_CLOCK_SYS_GetWdogFreq -Gets the watch dog clock frequency.
   - clkManager_CLOCK_SYS_GetTraceSrc -Gets the debug trace clock source.
   - clkManager_CLOCK_SYS_SetTraceSrc -Sets the debug trace clock source.
   - clkManager_CLOCK_SYS_GetTraceFreq -Gets the debug trace clock frequency.
   - clkManager_CLOCK_SYS_GetPortFilterFreq -Gets PORTx digital input filter clock frequency.
   - clkManager_CLOCK_SYS_GetLptmrFreq -Gets LPTMRx pre-scaler/glitch filter clock frequency.
   - clkManager_CLOCK_SYS_GetEnetRmiiSrc -Gets ethernet RMII clock source.
   - clkManager_CLOCK_SYS_SetEnetRmiiSrc -Sets ethernet RMII clock source.
   - clkManager_CLOCK_SYS_GetEnetRmiiFreq -Gets ethernet RMII clock frequency.
   - clkManager_CLOCK_SYS_SetEnetTimeStampSrc -Set the ethernet timestamp clock source selection.
   - clkManager_CLOCK_SYS_GetEnetTimeStampSrc -Get the ethernet timestamp clock source selection.
   - clkManager_CLOCK_SYS_GetEnetTimeStampFreq -Gets ethernet timestamp clock frequency.
   - clkManager_CLOCK_SYS_GetEwmFreq -Gets the clock frequency for EWM module.
   - clkManager_CLOCK_SYS_GetFtfFreq -Gets the clock frequency for FTF module. (Flash Memory)
   - clkManager_CLOCK_SYS_GetCrcFreq -Gets the clock frequency for CRC module.
   - clkManager_CLOCK_SYS_GetCmpFreq -Gets the clock frequency for CMP module.
   - clkManager_CLOCK_SYS_GetVrefFreq -Gets the clock frequency for VREF module.
   - clkManager_CLOCK_SYS_GetPdbFreq -Gets the clock frequency for PDB module.
   - clkManager_CLOCK_SYS_GetPitFreq -Gets the clock frequency for PIT module.
   - clkManager_CLOCK_SYS_GetCmtFreq -Gets the clock frequency for CMT module.
   - clkManager_CLOCK_SYS_GetUsbfsSrc -Gets the clock source for USB FS OTG module.
   - clkManager_CLOCK_SYS_SetUsbfsSrc -Sets the clock source for USB FS OTG module.
   - clkManager_CLOCK_SYS_GetUsbfsFreq -Gets the clock frequency for USB FS OTG module.
   - clkManager_CLOCK_SYS_SetUsbfsDiv -Set USB FS divider setting.
   - clkManager_CLOCK_SYS_GetUsbfsDiv -Get USB FS divider setting.
   - clkManager_CLOCK_SYS_GetFlexcanFreq -Gets FLEXCAN clock frequency.
   - clkManager_CLOCK_SYS_GetSdhcFreq -Gets the clock frequency for SDHC.
   - clkManager_CLOCK_SYS_SetSdhcSrc -Set the SDHC clock source selection.
   - clkManager_CLOCK_SYS_GetSdhcSrc -Get the SDHC clock source selection.
   - clkManager_CLOCK_SYS_GetSaiFreq -Gets the clock frequency for SAI.
   - clkManager_CLOCK_SYS_GetUsbdcdFreq -Gets the clock frequency for USB DCD module.
   - clkManager_CLOCK_SYS_GetSpiFreq -Gets the clock frequency for SPI module.
   - clkManager_CLOCK_SYS_GetI2cFreq -Gets the clock frequency for I2C module.
   - clkManager_CLOCK_SYS_GetAdcAltFreq -Gets ADC alternate clock frequency.
   - clkManager_CLOCK_SYS_GetFtmFixedFreq -Gets FTM fixed frequency clock frequency.
   - clkManager_CLOCK_SYS_GetFtmSystemClockFreq -Gets FTM's system clock frequency.
   - clkManager_CLOCK_SYS_GetFtmExternalFreq -Gets FTM external clock frequency.
   - clkManager_CLOCK_SYS_GetFtmExternalSrc -Gets FTM external clock source.
   - clkManager_CLOCK_SYS_SetFtmExternalSrc -Sets FTM external clock source.
   - clkManager_CLOCK_SYS_GetUartFreq -Gets the clock frequency for UART module.
   - clkManager_CLOCK_SYS_GetGpioFreq -Gets the clock frequency for GPIO module.
   - clkManager_CLOCK_SYS_EnableDmaClock -Enable the clock for DMA module.
   - clkManager_CLOCK_SYS_DisableDmaClock -Disable the clock for DMA module.
   - clkManager_CLOCK_SYS_GetDmaGateCmd -Get the the clock gate state for DMA module.
   - clkManager_CLOCK_SYS_EnableDmamuxClock -Enable the clock for DMAMUX module.
   - clkManager_CLOCK_SYS_DisableDmamuxClock -Disable the clock for DMAMUX module.
   - clkManager_CLOCK_SYS_GetDmamuxGateCmd -Get the the clock gate state for DMAMUX module.
   - clkManager_CLOCK_SYS_EnablePortClock -Enable the clock for PORT module.
   - clkManager_CLOCK_SYS_DisablePortClock -Disable the clock for PORT module.
   - clkManager_CLOCK_SYS_GetPortGateCmd -Get the the clock gate state for PORT module.
   - clkManager_CLOCK_SYS_EnableMpuClock -Enable the clock for MPU module.
   - clkManager_CLOCK_SYS_DisableMpuClock -Disable the clock for MPU module.
   - clkManager_CLOCK_SYS_GetMpuGateCmd -Get the the clock gate state for MPU module.
   - clkManager_CLOCK_SYS_EnableEwmClock -Enable the clock for EWM module.
   - clkManager_CLOCK_SYS_DisableEwmClock -Disable the clock for EWM module.
   - clkManager_CLOCK_SYS_GetEwmGateCmd -Get the the clock gate state for EWM module.
   - clkManager_CLOCK_SYS_EnableFlexbusClock -Enable the clock for FLEXBUS module.
   - clkManager_CLOCK_SYS_DisableFlexbusClock -Disable the clock for FLEXBUS module.
   - clkManager_CLOCK_SYS_GetFlexbusGateCmd -Get the the clock gate state for FLEXBUS module.
   - clkManager_CLOCK_SYS_EnableFtfClock -Enable the clock for FTF module.
   - clkManager_CLOCK_SYS_DisableFtfClock -Disable the clock for FTF module.
   - clkManager_CLOCK_SYS_GetFtfGateCmd -Get the the clock gate state for FTF module.
   - clkManager_CLOCK_SYS_EnableCrcClock -Enable the clock for CRC module.
   - clkManager_CLOCK_SYS_DisableCrcClock -Disable the clock for CRC module.
   - clkManager_CLOCK_SYS_GetCrcGateCmd -Get the the clock gate state for CRC module.
   - clkManager_CLOCK_SYS_EnableRngaClock -Enable the clock for RNGA module.
   - clkManager_CLOCK_SYS_DisableRngaClock -Disable the clock for RNGA module.
   - clkManager_CLOCK_SYS_GetRngaGateCmd -Get the the clock gate state for RNGA module.
   - clkManager_CLOCK_SYS_EnableAdcClock -Enable the clock for ADC module.
   - clkManager_CLOCK_SYS_DisableAdcClock -Disable the clock for ADC module.
   - clkManager_CLOCK_SYS_GetAdcGateCmd -Get the the clock gate state for ADC module.
   - clkManager_CLOCK_SYS_EnableCmpClock -Enable the clock for CMP module.
   - clkManager_CLOCK_SYS_DisableCmpClock -Disable the clock for CMP module.
   - clkManager_CLOCK_SYS_GetCmpGateCmd -Get the the clock gate state for CMP module.
   - clkManager_CLOCK_SYS_EnableDacClock -Enable the clock for DAC module.
   - clkManager_CLOCK_SYS_DisableDacClock -Disable the clock for DAC module.
   - clkManager_CLOCK_SYS_GetDacGateCmd -Get the the clock gate state for DAC module.
   - clkManager_CLOCK_SYS_EnableVrefClock -Enable the clock for VREF module.
   - clkManager_CLOCK_SYS_DisableVrefClock -Disable the clock for VREF module.
   - clkManager_CLOCK_SYS_GetVrefGateCmd -Get the the clock gate state for VREF module.
   - clkManager_CLOCK_SYS_EnableSaiClock -Enable the clock for SAI module.
   - clkManager_CLOCK_SYS_DisableSaiClock -Disable the clock for SAI module.
   - clkManager_CLOCK_SYS_GetSaiGateCmd -Get the the clock gate state for SAI module.
   - clkManager_CLOCK_SYS_EnablePdbClock -Enable the clock for PDB module.
   - clkManager_CLOCK_SYS_DisablePdbClock -Disable the clock for PDB module.
   - clkManager_CLOCK_SYS_GetPdbGateCmd -Get the the clock gate state for PDB module.
   - clkManager_CLOCK_SYS_EnableFtmClock -Enable the clock for FTM module.
   - clkManager_CLOCK_SYS_DisableFtmClock -Disable the clock for FTM module.
   - clkManager_CLOCK_SYS_GetFtmGateCmd -Get the the clock gate state for FTM module.
   - clkManager_CLOCK_SYS_EnablePitClock -Enable the clock for PIT module.
   - clkManager_CLOCK_SYS_DisablePitClock -Disable the clock for PIT module.
   - clkManager_CLOCK_SYS_GetPitGateCmd -Get the the clock gate state for PIT module.
   - clkManager_CLOCK_SYS_EnableLptmrClock -Enable the clock for LPTIMER module.
   - clkManager_CLOCK_SYS_DisableLptmrClock -Disable the clock for LPTIMER module.
   - clkManager_CLOCK_SYS_GetLptmrGateCmd -Get the the clock gate state for LPTIMER module.
   - clkManager_CLOCK_SYS_EnableCmtClock -Enable the clock for CMT module.
   - clkManager_CLOCK_SYS_DisableCmtClock -Disable the clock for CMT module.
   - clkManager_CLOCK_SYS_GetCmtGateCmd -Get the the clock gate state for CMT module.
   - clkManager_CLOCK_SYS_EnableRtcClock -Enable the clock for RTC module.
   - clkManager_CLOCK_SYS_DisableRtcClock -Disable the clock for RTC module.
   - clkManager_CLOCK_SYS_GetRtcGateCmd -Get the the clock gate state for RTC module.
   - clkManager_CLOCK_SYS_EnableEnetClock -Enable the clock for ENET module.
   - clkManager_CLOCK_SYS_DisableEnetClock -Disable the clock for ENET module.
   - clkManager_CLOCK_SYS_GetEnetGateCmd -Get the the clock gate state for ENET module.
   - clkManager_CLOCK_SYS_EnableUsbfsClock -Enable the clock for USBFS module.
   - clkManager_CLOCK_SYS_DisableUsbfsClock -Disable the clock for USBFS module.
   - clkManager_CLOCK_SYS_GetUsbfsGateCmd -Get the the clock gate state for USB module.
   - clkManager_CLOCK_SYS_EnableUsbdcdClock -Enable the clock for USBDCD module.
   - clkManager_CLOCK_SYS_DisableUsbdcdClock -Disable the clock for USBDCD module.
   - clkManager_CLOCK_SYS_GetUsbdcdGateCmd -Get the the clock gate state for USBDCD module.
   - clkManager_CLOCK_SYS_EnableFlexcanClock -Enable the clock for FLEXCAN module.
   - clkManager_CLOCK_SYS_DisableFlexcanClock -Disable the clock for FLEXCAN module.
   - clkManager_CLOCK_SYS_GetFlexcanGateCmd -Get the the clock gate state for FLEXCAN module.
   - clkManager_CLOCK_SYS_EnableSpiClock -Enable the clock for SPI module.
   - clkManager_CLOCK_SYS_DisableSpiClock -Disable the clock for SPI module.
   - clkManager_CLOCK_SYS_GetSpiGateCmd -Get the the clock gate state for SPI module.
   - clkManager_CLOCK_SYS_EnableI2cClock -Enable the clock for I2C module.
   - clkManager_CLOCK_SYS_DisableI2cClock -Disable the clock for I2C module.
   - clkManager_CLOCK_SYS_GetI2cGateCmd -Get the the clock gate state for I2C module.
   - clkManager_CLOCK_SYS_EnableUartClock -Enable the clock for UART module.
   - clkManager_CLOCK_SYS_DisableUartClock -Disable the clock for UART module.
   - clkManager_CLOCK_SYS_GetUartGateCmd -Get the the clock gate state for UART module.
   - clkManager_CLOCK_SYS_EnableSdhcClock -Enable the clock for SDHC module.
   - clkManager_CLOCK_SYS_DisableSdhcClock -Disable the clock for SDHC module.
   - clkManager_CLOCK_SYS_GetSdhcGateCmd -Get the the clock gate state for SDHC module.
   - clkManager_CLOCK_SYS_SetEnetExternalFreq -Set the ENET external clock frequency(ENET_1588_CLKIN).
   - clkManager_CLOCK_SYS_SetSdhcExternalFreq -Set the SDHC external clock frequency(SDHC_CLKIN).
   - clkManager_CLOCK_SYS_SetUsbExternalFreq -Set the USB external clock frequency(USB_CLKIN).
   - clkManager_CLOCK_SYS_SetFtmExternalFreq -Set the FTM external clock frequency(FTM_CLKx).
   - clkManager_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clkManager_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clkManager_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clkManager_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clkManager_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clkManager_CLOCK_SYS_SetMcgliteMode -Sets the MCG_Lite to some specific mode.
   - clkManager_CLOCK_SYS_SetMcgMode -Set MCG to some target mode.
   - clkManager_CLOCK_SYS_OscInit -Initialize OSC.
   - clkManager_CLOCK_SYS_OscDeinit -Deinitialize OSC.
   - clkManager_CLOCK_SYS_SetOscerConfigration -Configure the OSCERCLK.
   - clkManager_CLOCK_SYS_RtcOscInit -Initialize the RTC OSC.
   - clkManager_CLOCK_SYS_RtcOscDeinit -Deinitialize RTC OSC.
   - clkManager_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.
   - clkManager_CLOCK_SYS_GetCoreClockFreq -Get core clock frequency.
   - clkManager_CLOCK_SYS_GetSystemClockFreq -Get system clock frequency.
   - clkManager_CLOCK_SYS_GetBusClockFreq -Get bus clock frequency.
   - clkManager_CLOCK_SYS_GetFlashClockFreq -Get flash clock frequency.
   - clkManager_CLOCK_SYS_GetLpoClockFreq -Get LPO clock frequency.
   - clkManager_CLOCK_SYS_SetSystickSrc -Set Systick clock source SYST_CSR[CLKSOURCE].
   - clkManager_CLOCK_SYS_GetSystickFreq -Get Systick clock frequency.

Module "pin_mux"   (component PinSettings)
   - pin_mux_hardware_init -This method configures registers according to settings of routing and electrical features. It 
                provides pin initialization for selected pins during processor start-up. Selected pins are either user selected 
                pins or pins selected in pin properties in components.  Only pins of devices  enabled for auto initialization 
                are handled within this method.
   - pin_mux_init_gpio_pins -GPIO method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into PTA,
                PTB, PTC, PTD, PTE peripherals.
   - pin_mux_deinit_gpio_pins -GPIO method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into PTA,
                PTB, PTC, PTD, PTE peripherals.
   - pin_mux_init_jtag_pins -JTAG method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                JTAG peripheral.
   - pin_mux_deinit_jtag_pins -JTAG method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                JTAG peripheral.
   - pin_mux_init_llwu_pins -LLWU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                LLWU peripheral.
   - pin_mux_deinit_llwu_pins -LLWU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                LLWU peripheral.
   - pin_mux_init_spi_pins -SPI method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                SPI0, SPI1, SPI2 peripherals.
   - pin_mux_deinit_spi_pins -SPI method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                SPI0, SPI1, SPI2 peripherals.
   - pin_mux_init_tpiu_pins -TPIU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                TPIU peripheral.
   - pin_mux_deinit_tpiu_pins -TPIU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                TPIU peripheral.

Module "osa1"      (component fsl_os_abstraction)
   - osa1_OSA_PollAllOtherTasks -Calls all task functions one time except for the current task.
   - osa1_DefaultISR -The default interrupt handler installed in vector table.
   - osa1_OSA_SemaCreate -Creates a semaphore with a given value.
   - osa1_OSA_SemaWait -Pending a semaphore with timeout.
   - osa1_OSA_SemaPost -Signals for someone waiting on the semaphore to wake up.
   - osa1_OSA_SemaDestroy -Destroys a previously created semaphore.
   - osa1_OSA_MutexCreate -Create an unlocked mutex.
   - osa1_OSA_MutexLock -Waits for a mutex and locks it.
   - osa1_OSA_MutexUnlock -Unlocks a previously locked mutex.
   - osa1_OSA_MutexDestroy -Destroys a previously created mutex.
   - osa1_OSA_EventCreate -Initializes an event object with all flags cleared.
   - osa1_OSA_EventWait -Waits for specified event flags to be set.
   - osa1_OSA_EventSet -Sets one or more event flags.
   - osa1_OSA_EventClear -Clears one or more flags.
   - osa1_OSA_EventGetFlags -Gets event flags status.
   - osa1_OSA_EventDestroy -Destroys a previously created event object.
   - osa1_OSA_TaskCreate -Creates a task.
   - osa1_OSA_TaskDestroy -Destroys a previously created task.
   - osa1_OSA_TaskYield -Puts the active task to the end of scheduler's queue.
   - osa1_OSA_TaskGetHandler -Gets the handler of active task.
   - osa1_OSA_TaskGetPriority -Gets the priority of a task.
   - osa1_OSA_TaskSetPriority -Sets the priority of a task.
   - osa1_OSA_MsgQCreate -Initializes a message queue.
   - osa1_OSA_MsgQPut -Puts a message at the end of the queue.
   - osa1_OSA_MsgQGet -Reads and remove a message at the head of the queue.
   - osa1_OSA_MsgQDestroy -Destroys a previously created queue.
   - osa1_OSA_MemAlloc -Reserves the requested amount of memory in bytes.
   - osa1_OSA_MemAllocZero -Reserves the requested amount of memory in bytes and initializes it to 0.
   - osa1_OSA_MemFree -Releases the memory previously reserved.
   - osa1_OSA_TimeDelay -Delays execution for a number of milliseconds.
   - osa1_OSA_TimeGetMsec -Gets the current time since system boot in milliseconds.
   - osa1_OSA_InstallIntHandler -Installs the interrupt handler.
   - osa1_OSA_EnterCritical -Enters the critical section to ensure some code is not preempted.
   - osa1_OSA_ExitCritical -Exits the critical section.
   - osa1_OSA_Init -Initializes the RTOS services.
   - osa1_OSA_Start -Starts the RTOS.

Module "intMan1"   (component fsl_interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.

Module "OLED_SPI"  (component fsl_dspi)
   - OLED_SPI_DSPI_DRV_EdmaIRQHandler -The function DSPI_DRV_EdmaIRQHandler passes IRQ control to either the master or slave 
                driver.
   - OLED_SPI_DSPI_DRV_EdmaMasterInit -Initializes a DSPI instance for master mode operation to work with EDMA.
   - OLED_SPI_DSPI_DRV_EdmaMasterDeinit -Shuts down a DSPI instance with the EDMA support.
   - OLED_SPI_DSPI_DRV_EdmaMasterSetDelay -Configures the DSPI master mode bus timing delay options with the EDMA support.
   - OLED_SPI_DSPI_DRV_EdmaMasterConfigureBus -Configures the DSPI port physical parameters to access a device on the bus with 
                the EDMA support.
   - OLED_SPI_DSPI_DRV_EdmaMasterTransferBlocking -Performs a blocking SPI master mode transfer with the EDMA support.
   - OLED_SPI_DSPI_DRV_EdmaMasterTransfer -Performs a non-blocking SPI master mode transfer with the EDMA support.
   - OLED_SPI_DSPI_DRV_EdmaMasterGetTransferStatus -Returns whether the previous transfer is completed with the EDMA support.
   - OLED_SPI_DSPI_DRV_EdmaMasterAbortTransfer -Terminates an asynchronous transfer early with the EDMA support.
   - OLED_SPI_DSPI_DRV_EdmaMasterIRQHandler -Interrupt handler for DSPI master mode. This handler uses the buffers stored in 
                the dspi_master_state_t structs to transfer data.
   - OLED_SPI_DSPI_DRV_EdmaSlaveInit -Initializes a DSPI instance for a slave mode operation, using eDMA mechanism.
   - OLED_SPI_DSPI_DRV_EdmaSlaveDeinit -Shuts down a DSPI instance - eDMA mechanism.
   - OLED_SPI_DSPI_DRV_EdmaSlaveTransferBlocking -Transfers data on the SPI bus using the eDMA and blocking call.
   - OLED_SPI_DSPI_DRV_EdmaSlaveTransfer -Starts transfer data on SPI bus using eDMA.
   - OLED_SPI_DSPI_DRV_EdmaSlaveAbortTransfer -Aborts the transfer that started by a non-blocking call to the eDMA transfer 
                function.
   - OLED_SPI_DSPI_DRV_EdmaSlaveGetTransferStatus -Returns whether the previous transfer is finished.
   - OLED_SPI_DSPI_DRV_EdmaSlaveIRQHandler -DSPI slave interrupt handler.

Module "FLASH_SPI" (component fsl_dspi)
   - FLASH_SPI_DSPI_DRV_EdmaIRQHandler -The function DSPI_DRV_EdmaIRQHandler passes IRQ control to either the master or slave 
                driver.
   - FLASH_SPI_DSPI_DRV_EdmaMasterInit -Initializes a DSPI instance for master mode operation to work with EDMA.
   - FLASH_SPI_DSPI_DRV_EdmaMasterDeinit -Shuts down a DSPI instance with the EDMA support.
   - FLASH_SPI_DSPI_DRV_EdmaMasterSetDelay -Configures the DSPI master mode bus timing delay options with the EDMA support.
   - FLASH_SPI_DSPI_DRV_EdmaMasterConfigureBus -Configures the DSPI port physical parameters to access a device on the bus with 
                the EDMA support.
   - FLASH_SPI_DSPI_DRV_EdmaMasterTransferBlocking -Performs a blocking SPI master mode transfer with the EDMA support.
   - FLASH_SPI_DSPI_DRV_EdmaMasterTransfer -Performs a non-blocking SPI master mode transfer with the EDMA support.
   - FLASH_SPI_DSPI_DRV_EdmaMasterGetTransferStatus -Returns whether the previous transfer is completed with the EDMA support.
   - FLASH_SPI_DSPI_DRV_EdmaMasterAbortTransfer -Terminates an asynchronous transfer early with the EDMA support.
   - FLASH_SPI_DSPI_DRV_EdmaMasterIRQHandler -Interrupt handler for DSPI master mode. This handler uses the buffers stored in 
                the dspi_master_state_t structs to transfer data.
   - FLASH_SPI_DSPI_DRV_EdmaSlaveInit -Initializes a DSPI instance for a slave mode operation, using eDMA mechanism.
   - FLASH_SPI_DSPI_DRV_EdmaSlaveDeinit -Shuts down a DSPI instance - eDMA mechanism.
   - FLASH_SPI_DSPI_DRV_EdmaSlaveTransferBlocking -Transfers data on the SPI bus using the eDMA and blocking call.
   - FLASH_SPI_DSPI_DRV_EdmaSlaveTransfer -Starts transfer data on SPI bus using eDMA.
   - FLASH_SPI_DSPI_DRV_EdmaSlaveAbortTransfer -Aborts the transfer that started by a non-blocking call to the eDMA transfer 
                function.
   - FLASH_SPI_DSPI_DRV_EdmaSlaveGetTransferStatus -Returns whether the previous transfer is finished.
   - FLASH_SPI_DSPI_DRV_EdmaSlaveIRQHandler -DSPI slave interrupt handler.

Module "dmaController1" (component fsl_edma)
   - dmaController1_EDMA_DRV_Init -Initializes all eDMA modules in an SOC.
   - dmaController1_EDMA_DRV_Deinit -Shuts down all eDMA modules.
   - dmaController1_EDMA_DRV_RequestChannel -Requests an eDMA channel dynamically or statically.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_PrepareDescriptorTransfer -Sets the descriptor basic transfer for the descriptor.
   - dmaController1_EDMA_DRV_PrepareDescriptorScatterGather -Configures the memory address for the next transfer TCD for the 
                software TCD.
   - dmaController1_EDMA_DRV_PrepareDescriptorChannelLink -Configures the major channel link the software TCD.
   - dmaController1_EDMA_DRV_PushDescriptorToReg -Copies the software TCD configuration to the hardware TCD.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_IRQHandler -IRQ Handler for eDMA channel interrupt.
   - dmaController1_EDMA_DRV_ErrorIRQHandler -ERROR IRQ Handler for eDMA channel interrupt.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_GetUnfinishedBytes -Gets the unfinished bytes for the eDMA channel current TCD.
   - dmaController1_EDMA_DRV_GetFinishedBytes -Gets the bytes already transferred for the eDMA channel current TCD.

Module "GPIO"      (component fsl_gpio)
   - GPIO_GPIO_DRV_Init -Initializes all GPIO pins used by the board.
   - GPIO_GPIO_DRV_InputPinInit -Initializes one GPIO input pin used by the board.
   - GPIO_GPIO_DRV_OutputPinInit -Initializes one GPIO output pin used by the board.
   - GPIO_GPIO_DRV_GetPinDir -Gets the current direction of the individual GPIO pin.
   - GPIO_GPIO_DRV_SetPinDir -Sets the current direction of the individual GPIO pin.
   - GPIO_GPIO_DRV_WritePinOutput -Sets the output level of the individual GPIO pin to the logic 1 or 0.
   - GPIO_GPIO_DRV_SetPinOutput -Sets the output level of the individual GPIO pin to the logic 1.
   - GPIO_GPIO_DRV_ClearPinOutput -Sets the output level of the individual GPIO pin to the logic 0.
   - GPIO_GPIO_DRV_TogglePinOutput -Reverses current output logic of the individual GPIO pin.
   - GPIO_GPIO_DRV_ReadPinInput -Reads the current input value of the individual GPIO pin.
   - GPIO_GPIO_DRV_SetDigitalFilterCmd -Enables or disables the digital filter in a single port.
   - GPIO_GPIO_DRV_IsPinIntPending -Reads the individual pin-interrupt status flag.
   - GPIO_GPIO_DRV_ClearPinIntFlag -Clears the individual GPIO pin interrupt status flag.

Module "PWR_Manager" (component fsl_power_manager)
   - PWR_Manager_POWER_SYS_Init -Power manager initialization for operation.
   - PWR_Manager_POWER_SYS_Deinit -This function deinitializes the Power manager.
   - PWR_Manager_POWER_SYS_SetMode -This function configures the power mode.
   - PWR_Manager_POWER_SYS_GetLastMode -This function returns power mode set as the last one.
   - PWR_Manager_POWER_SYS_GetLastModeConfig -This function returns user configuration structure of power mode set as the last 
                one.
   - PWR_Manager_POWER_SYS_GetCurrentMode -This function returns currently running power mode.
   - PWR_Manager_POWER_SYS_GetErrorCallbackIndex -This function returns the last failed notification callback.
   - PWR_Manager_POWER_SYS_GetErrorCallback -This function returns the last failed notification callback configuration 
                structure.
   - PWR_Manager_POWER_SYS_GetVeryLowPowerModeStatus -This function returns whether very low power mode is running.
   - PWR_Manager_POWER_SYS_GetLowLeakageWakeupResetStatus -This function returns whether reset was caused by low leakage wake 
                up.
   - PWR_Manager_POWER_SYS_GetAckIsolation -Gets the acknowledge isolation flag.
   - PWR_Manager_POWER_SYS_ClearAckIsolation -Clears the acknowledge isolation flag.
   - PWR_Manager_POWER_SYS_SetWakeupModule -This function allows to set wake up module in low leakage wake up unit (LLWU). Each 
                of the available wake-up sources can be individually enabled or disabled.
   - PWR_Manager_POWER_SYS_GetWakeupModuleFlag -This function allows to get wake up module flag in LLWU.
   - PWR_Manager_POWER_SYS_SetWakeupPin -This function allows to set wake up pin in low leakage wake up unit (LLWU) and allows 
                to configure pin electrical parameters if gpio pin configuration is passed as parameter. Each of the available 
                wake-up sources can be individually enabled or disabled.
   - PWR_Manager_POWER_SYS_GetWakeupPinFlag -This function allows to get wake up pin flag in low leakage wake up unit (LLWU).
   - PWR_Manager_POWER_SYS_ClearWakeupPinFlag -This function allows to clear wake up pin flag in low leakage wake up unit (LLWU)
                .

Module "Cpu"       (component MK64FN1M0DC12_4SDK)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.

===================================================================================
